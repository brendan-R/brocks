% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/munge.R
\name{refactor_list}
\alias{refactor_list}
\title{Produce a lookup for refactor()}
\usage{
refactor_list(x, consolidate = FALSE, file = NULL)
}
\arguments{
\item{x}{A \code{\link{factor}} (or \code{\link{character}}) variable}

\item{consolidate}{\code{\link{logical}}. Should the 'TO' values be passed
through \code{\link{consolidate_values}} in an automated attempt to clean
them up?}

\item{file}{A writable file path. If supplied, the lookup will be written
out to a two column .csv file, as opposed to written to the console. The
file produced can be passed to the file argument in \code{\link{refactor}}}
}
\value{
Nothing. Prints to the console/terminal with \code{\link{cat}}.
}
\description{
{
  The \code{refactor_list} command is a helper function for
  \code{\link{refactor}}. It prints the \bold{\code{R}} code requiqred for a
  'lookup' to the console, for inclusion in data preparation/cleaning scripts
  (perhaps after a bit of editing!).

  For vary large lookups, it might make more sense to pass the lookup to
  \code{\link{refactor}} using a file. You can write the lookup
  to a \code{.csv} file by supplying a path/name to the the \code{file}
  argument.

  To try and make the process less laborious, \code{refactor_list} also has a
  \code{consolidate} parameter. If set to \code{TRUE}, the lookup generated
  will pass the 'TO' values through \code{\link{consolidate_values}},
  hopefully consoldating factor levels which are different for small
  formatting reasons in to one. See the \code{\link{consolidate_values}}
  documentation for details.

  For a demonstration of how \code{\link{refactor}} and \code{refactor_list}
  work together, see the package vignette, with:

  \code{vignette('brocks')}
}
}
\examples{
# Let's tidy up the gender variable in test_data
data(test_data)
table(test_data$gender)

# Passing the gender variable to refactor_list, will generate the R code we
# need to create a lookup for it in our data-cleaning script! Setting
# consolidate to TRUE will do some of the work for us.

refactor_list(test_data$gender, consolidate = TRUE)

# At this point you'd take the code generated and itegrate it into your
# script. Here's one I made earlier. We can pass it to refactor, and our
# factor variable is now tidy!

new_vals <- list(
  # FROM      TO
  c("",        NA     ),
  c("<NA>",    NA     ),
  c("F",      "female"),
  c("Female", "female"),
  c("m",      "male"  ),
  c("M",      "male"  ),
  c("Male",   "male"  ),
  c("Man",    "male"  ),
  c("Woman",  "female"),
  c("n/a",     NA     )
)

test_data$gender <- refactor(test_data$gender, new_vals)

}
\author{
Brendan Rocks \email{rocks.brendan@gmail.com}
}
\seealso{
\code{\link{refactor}}, the function which \code{rfeactor_list}
  supports
}

